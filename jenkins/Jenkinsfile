pipeline {
    agent { label 'docker' }
    stages {
        // stage('Checkout') {
        //     steps {
        //         checkout scm
        //     }
        // }
        stage('Checkout Git') {
            steps { 
                // checkout scm
                sh 'cd ..'
                dir('ANSIBLE') { 
                    sh 'rm -rf *'
                    git branch: 'master', credentialsId: 'git-repos', url: 'git@github.com:luiscarmignotto/devops-ansible-k8s-builds.git'
                    git branch: 'master', credentialsId: 'git-repos', url: 'git@github.com:luiscarmignotto/devops-ansible-k8s-roles.git'
                    // withCredentials([sshUserPrivateKey(credentialsId: 'git-repos', keyFileVariable: 'SSH_KEY')]) {  
                    //     sh '''
                    //     rm -rf *
                    //     GIT_SSH_COMMAND="ssh -i $SSH_KEY" git clone git@github.com:luiscarmignotto/devops-ansible-k8s-builds.git
                    //     cd devops-ansible-k8s-builds
                    //     git checkout master && git pull --all
                    //     cd -
                    //     GIT_SSH_COMMAND="ssh -i $SSH_KEY" git clone git@github.com:luiscarmignotto/devops-ansible-k8s-roles.git
                    //     cd devops-ansible-k8s-roles
                    //     git checkout master && git pull --all
                    //     cd -                        
                    //     '''
                    // }
                }
                sh 'ls -lrth'
                sh 'cd fipewatcher_master'
                sh 'ls -lrth'
            }
        }  
        stage('Updating Ansible Inventory') {
            steps {
                script {
                    def inventoryFile = './ANSIBLE/devops-ansible-k8s-builds/inventory/group_vars/local_lab.yml'
                    def data = readYaml file: inventoryFile
                    data.solution.application.fipewatcher.image_tag = "2.3.0"
                    sh "rm $inventoryFile"
                    writeYaml file: inventoryFile, data: data
                }
            }
        }    
        stage('Build and Push') {
            steps {
                script {
                    def packageJson = readJSON file: 'package.json'
                    def appName = packageJson.name
                    def appVersion = packageJson.version
                    def registryUrl = packageJson.dockerRegistryUrl
                    // def imageName = "${registryUrl}/${appName}:${appVersion}"             
                    def imageName = "${appName}:${appVersion}"
                    // sh "docker build -t ${imageName} ."
                    sh "minikube image build -t ${imageName} ."
                    sh "jenkins/scripts/dockerRegistryTunnel.sh"
                    // sh "docker push ${imageName}"
                }
            }
        }
        stage('Deploy') {
            steps {
                sh "echo deploying"
            }
        }
    }
}